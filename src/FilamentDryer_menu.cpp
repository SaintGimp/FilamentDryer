/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "FilamentDryer_menu.h"

// Global variable declarations

AdaFruitGfxMenuRenderer renderer;

// Global Menu Item declarations

const AnalogMenuInfo minfoSettingsPETGTemp = { "PETG Temp", 7, 0xffff, 99, menuChangePetgTemp, 0, 1, "C" };
AnalogMenuItem menuSettingsPETGTemp(&minfoSettingsPETGTemp, 0, NULL);
const AnalogMenuInfo minfoSettingsPLATemp = { "PLA Temp", 6, 0xffff, 99, menuChangePlaTemp, 0, 1, "C" };
AnalogMenuItem menuSettingsPLATemp(&minfoSettingsPLATemp, 0, &menuSettingsPETGTemp);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NULL)
const SubMenuInfo minfoSettings = { "Settings", 5, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuSettingsPLATemp);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, NULL);
const char enumStrHeaterMode_0[] = "Off";
const char enumStrHeaterMode_1[] = "PLA";
const char enumStrHeaterMode_2[] = "PETG";
const char* const enumStrHeaterMode[]  = { enumStrHeaterMode_0, enumStrHeaterMode_1, enumStrHeaterMode_2 };
const EnumMenuInfo minfoHeaterMode = { "Heater Mode", 11, 0xffff, 2, menuChangeHeaterMode, enumStrHeaterMode };
EnumMenuItem menuHeaterMode(&minfoHeaterMode, 0, &menuSettings);
RENDERING_CALLBACK_NAME_INVOKE(fnHumidityRtCall, textItemRenderFn, "Humidity", -1, NULL)
TextMenuItem menuHumidity(fnHumidityRtCall, 10, 7, &menuHeaterMode);
RENDERING_CALLBACK_NAME_INVOKE(fnTemperatureRtCall, textItemRenderFn, "Temperature", -1, NULL)
TextMenuItem menuTemperature(fnTemperatureRtCall, 9, 8, &menuHumidity);
const ConnectorLocalInfo applicationInfo = { "Filament Dryer", "f85f07b7-3b06-4e91-b356-f4b93e2f4449" };

// Set up code

void setupMenu() {
    renderer.setGraphicsDevice(&gfx, &gfxConfig);
    switches.initialise(ioUsingArduino(), true);
    menuMgr.initForUpDownOk(&renderer, &menuTemperature, ENCODER_UP_PIN, ENCODER_DOWN_PIN, ENCODER_OK_PIN);

    // Read only and local only function calls
    menuHumidity.setReadOnly(true);
    menuTemperature.setReadOnly(true);
}

